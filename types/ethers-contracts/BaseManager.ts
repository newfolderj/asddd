/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BaseManagerInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "collateral()": FunctionFragment;
    "deployRelayer(address,address,string[],uint256[])": FunctionFragment;
    "fraudEngine()": FunctionFragment;
    "getPrice(address,address)": FunctionFragment;
    "getReceiverAddress(uint256)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "portal()": FunctionFragment;
    "receivers(uint256)": FunctionFragment;
    "relayer()": FunctionFragment;
    "rollup()": FunctionFragment;
    "setReceivers(uint256[],address[])": FunctionFragment;
    "validator()": FunctionFragment;
    "walletDelegation()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "collateral"
      | "deployRelayer"
      | "fraudEngine"
      | "getPrice"
      | "getReceiverAddress"
      | "isValidator"
      | "portal"
      | "receivers"
      | "relayer"
      | "rollup"
      | "setReceivers"
      | "validator"
      | "walletDelegation"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployRelayer",
    values: [string, string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fraudEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiverAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "relayer", values?: undefined): string;
  encodeFunctionData(functionFragment: "rollup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setReceivers",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "validator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "walletDelegation",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fraudEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receivers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "walletDelegation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BaseManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    deployRelayer(
      _axelarGateway: string,
      _axelarGasReceiver: string,
      _chainNames: string[],
      _chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fraudEngine(overrides?: CallOverrides): Promise<[string]>;

    getPrice(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReceiverAddress(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    portal(overrides?: CallOverrides): Promise<[string]>;

    receivers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    relayer(overrides?: CallOverrides): Promise<[string]>;

    rollup(overrides?: CallOverrides): Promise<[string]>;

    setReceivers(
      _chainIds: BigNumberish[],
      _receivers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validator(overrides?: CallOverrides): Promise<[string]>;

    walletDelegation(overrides?: CallOverrides): Promise<[string]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  collateral(overrides?: CallOverrides): Promise<string>;

  deployRelayer(
    _axelarGateway: string,
    _axelarGasReceiver: string,
    _chainNames: string[],
    _chainIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fraudEngine(overrides?: CallOverrides): Promise<string>;

  getPrice(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReceiverAddress(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidator(_validator: string, overrides?: CallOverrides): Promise<boolean>;

  portal(overrides?: CallOverrides): Promise<string>;

  receivers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  relayer(overrides?: CallOverrides): Promise<string>;

  rollup(overrides?: CallOverrides): Promise<string>;

  setReceivers(
    _chainIds: BigNumberish[],
    _receivers: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validator(overrides?: CallOverrides): Promise<string>;

  walletDelegation(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    collateral(overrides?: CallOverrides): Promise<string>;

    deployRelayer(
      _axelarGateway: string,
      _axelarGasReceiver: string,
      _chainNames: string[],
      _chainIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    fraudEngine(overrides?: CallOverrides): Promise<string>;

    getPrice(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiverAddress(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    portal(overrides?: CallOverrides): Promise<string>;

    receivers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    relayer(overrides?: CallOverrides): Promise<string>;

    rollup(overrides?: CallOverrides): Promise<string>;

    setReceivers(
      _chainIds: BigNumberish[],
      _receivers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    validator(overrides?: CallOverrides): Promise<string>;

    walletDelegation(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    deployRelayer(
      _axelarGateway: string,
      _axelarGasReceiver: string,
      _chainNames: string[],
      _chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fraudEngine(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiverAddress(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    portal(overrides?: CallOverrides): Promise<BigNumber>;

    receivers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relayer(overrides?: CallOverrides): Promise<BigNumber>;

    rollup(overrides?: CallOverrides): Promise<BigNumber>;

    setReceivers(
      _chainIds: BigNumberish[],
      _receivers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validator(overrides?: CallOverrides): Promise<BigNumber>;

    walletDelegation(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployRelayer(
      _axelarGateway: string,
      _axelarGasReceiver: string,
      _chainNames: string[],
      _chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fraudEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiverAddress(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    portal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setReceivers(
      _chainIds: BigNumberish[],
      _receivers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    walletDelegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
