/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AssetChainManagerInterface extends utils.Interface {
  functions: {
    "acceptAdminTransfer()": FunctionFragment;
    "addSupportedAsset(address,address)": FunctionFragment;
    "admin()": FunctionFragment;
    "cancelAdminTransfer()": FunctionFragment;
    "deployReceiver(address,uint16)": FunctionFragment;
    "getMinimumDeposit(address)": FunctionFragment;
    "minimumDeposit(address)": FunctionFragment;
    "newAdmin()": FunctionFragment;
    "participatingInterface()": FunctionFragment;
    "portal()": FunctionFragment;
    "receiver()": FunctionFragment;
    "replaceParticipatingInterface(address)": FunctionFragment;
    "replaceReceiver(address)": FunctionFragment;
    "setMinimumDeposit(address,uint256)": FunctionFragment;
    "supportedAsset(address)": FunctionFragment;
    "transferAdmin(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptAdminTransfer"
      | "addSupportedAsset"
      | "admin"
      | "cancelAdminTransfer"
      | "deployReceiver"
      | "getMinimumDeposit"
      | "minimumDeposit"
      | "newAdmin"
      | "participatingInterface"
      | "portal"
      | "receiver"
      | "replaceParticipatingInterface"
      | "replaceReceiver"
      | "setMinimumDeposit"
      | "supportedAsset"
      | "transferAdmin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptAdminTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedAsset",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelAdminTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployReceiver",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDeposit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "newAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participatingInterface",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(functionFragment: "receiver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "replaceParticipatingInterface",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAdminTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAdminTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participatingInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receiver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "replaceParticipatingInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AssetChainManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetChainManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAdminTransfer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addSupportedAsset(
      _asset: string,
      _approved: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    cancelAdminTransfer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployReceiver(
      _lzEndpoint: string,
      _lzProcessingChainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMinimumDeposit(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newAdmin(overrides?: CallOverrides): Promise<[string]>;

    participatingInterface(overrides?: CallOverrides): Promise<[string]>;

    portal(overrides?: CallOverrides): Promise<[string]>;

    receiver(overrides?: CallOverrides): Promise<[string]>;

    replaceParticipatingInterface(
      _participatingInterface: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    replaceReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinimumDeposit(
      _asset: string,
      _minimum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportedAsset(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    transferAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptAdminTransfer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addSupportedAsset(
    _asset: string,
    _approved: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  cancelAdminTransfer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployReceiver(
    _lzEndpoint: string,
    _lzProcessingChainId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMinimumDeposit(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minimumDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  newAdmin(overrides?: CallOverrides): Promise<string>;

  participatingInterface(overrides?: CallOverrides): Promise<string>;

  portal(overrides?: CallOverrides): Promise<string>;

  receiver(overrides?: CallOverrides): Promise<string>;

  replaceParticipatingInterface(
    _participatingInterface: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  replaceReceiver(
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinimumDeposit(
    _asset: string,
    _minimum: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportedAsset(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  transferAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAdminTransfer(overrides?: CallOverrides): Promise<void>;

    addSupportedAsset(
      _asset: string,
      _approved: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    cancelAdminTransfer(overrides?: CallOverrides): Promise<void>;

    deployReceiver(
      _lzEndpoint: string,
      _lzProcessingChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinimumDeposit(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    newAdmin(overrides?: CallOverrides): Promise<string>;

    participatingInterface(overrides?: CallOverrides): Promise<string>;

    portal(overrides?: CallOverrides): Promise<string>;

    receiver(overrides?: CallOverrides): Promise<string>;

    replaceParticipatingInterface(
      _participatingInterface: string,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceReceiver(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumDeposit(
      _asset: string,
      _minimum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedAsset(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    transferAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptAdminTransfer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addSupportedAsset(
      _asset: string,
      _approved: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAdminTransfer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployReceiver(
      _lzEndpoint: string,
      _lzProcessingChainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMinimumDeposit(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    newAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    participatingInterface(overrides?: CallOverrides): Promise<BigNumber>;

    portal(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<BigNumber>;

    replaceParticipatingInterface(
      _participatingInterface: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    replaceReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinimumDeposit(
      _asset: string,
      _minimum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportedAsset(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAdminTransfer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addSupportedAsset(
      _asset: string,
      _approved: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelAdminTransfer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployReceiver(
      _lzEndpoint: string,
      _lzProcessingChainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMinimumDeposit(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participatingInterface(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    portal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    replaceParticipatingInterface(
      _participatingInterface: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    replaceReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinimumDeposit(
      _asset: string,
      _minimum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportedAsset(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
