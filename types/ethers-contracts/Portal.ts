/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IPortal {
  export type ObligationStruct = {
    recipient: string;
    asset: string;
    amount: BigNumberish;
  };

  export type ObligationStructOutput = [string, string, BigNumber] & {
    recipient: string;
    asset: string;
    amount: BigNumber;
  };
}

export interface PortalInterface extends utils.Interface {
  functions: {
    "chainSequenceId()": FunctionFragment;
    "collateralized(address)": FunctionFragment;
    "depositNativeAsset()": FunctionFragment;
    "depositToken(address,uint256)": FunctionFragment;
    "deposits(bytes32)": FunctionFragment;
    "depositsPaused()": FunctionFragment;
    "getAvailableBalance(address,address)": FunctionFragment;
    "pauseDeposits()": FunctionFragment;
    "rejectDeposits(bytes32[])": FunctionFragment;
    "rejected(address,address)": FunctionFragment;
    "rejectedDeposits(bytes32)": FunctionFragment;
    "requestSettlement(address)": FunctionFragment;
    "resumeDeposits()": FunctionFragment;
    "settled(address,address)": FunctionFragment;
    "settlementRequests(uint256)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdrawRejected(uint256,address)": FunctionFragment;
    "writeObligations((address,address,uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chainSequenceId"
      | "collateralized"
      | "depositNativeAsset"
      | "depositToken"
      | "deposits"
      | "depositsPaused"
      | "getAvailableBalance"
      | "pauseDeposits"
      | "rejectDeposits"
      | "rejected"
      | "rejectedDeposits"
      | "requestSettlement"
      | "resumeDeposits"
      | "settled"
      | "settlementRequests"
      | "withdraw"
      | "withdrawRejected"
      | "writeObligations"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "chainSequenceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNativeAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposits", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "depositsPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectDeposits",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rejected",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectedDeposits",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSettlement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settled",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRejected",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeObligations",
    values: [IPortal.ObligationStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "chainSequenceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNativeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rejected", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeObligations",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,address,uint256)": EventFragment;
    "DepositUtxo(address,uint256,address,address,uint256,bytes32)": EventFragment;
    "DepositsPaused()": EventFragment;
    "DepositsResumed()": EventFragment;
    "RejectedDeposit(address,address,uint256)": EventFragment;
    "SettlementProcessed(address,address,uint256)": EventFragment;
    "SettlementRequested(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,address)": EventFragment;
    "WithdrawRejectedDeposit(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositUtxo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositsPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositsResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RejectedDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRejectedDeposit"): EventFragment;
}

export interface DepositEventObject {
  wallet: string;
  amount: BigNumber;
  token: string;
  chainSequenceId: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositUtxoEventObject {
  wallet: string;
  amount: BigNumber;
  token: string;
  participatingInterface: string;
  chainSequenceId: BigNumber;
  utxo: string;
}
export type DepositUtxoEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, string],
  DepositUtxoEventObject
>;

export type DepositUtxoEventFilter = TypedEventFilter<DepositUtxoEvent>;

export interface DepositsPausedEventObject {}
export type DepositsPausedEvent = TypedEvent<[], DepositsPausedEventObject>;

export type DepositsPausedEventFilter = TypedEventFilter<DepositsPausedEvent>;

export interface DepositsResumedEventObject {}
export type DepositsResumedEvent = TypedEvent<[], DepositsResumedEventObject>;

export type DepositsResumedEventFilter = TypedEventFilter<DepositsResumedEvent>;

export interface RejectedDepositEventObject {
  trader: string;
  asset: string;
  amount: BigNumber;
}
export type RejectedDepositEvent = TypedEvent<
  [string, string, BigNumber],
  RejectedDepositEventObject
>;

export type RejectedDepositEventFilter = TypedEventFilter<RejectedDepositEvent>;

export interface SettlementProcessedEventObject {
  trader: string;
  token: string;
  amount: BigNumber;
}
export type SettlementProcessedEvent = TypedEvent<
  [string, string, BigNumber],
  SettlementProcessedEventObject
>;

export type SettlementProcessedEventFilter =
  TypedEventFilter<SettlementProcessedEvent>;

export interface SettlementRequestedEventObject {
  trader: string;
  token: string;
  chainSequenceId: BigNumber;
}
export type SettlementRequestedEvent = TypedEvent<
  [string, string, BigNumber],
  SettlementRequestedEventObject
>;

export type SettlementRequestedEventFilter =
  TypedEventFilter<SettlementRequestedEvent>;

export interface WithdrawEventObject {
  wallet: string;
  amount: BigNumber;
  token: string;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, string],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawRejectedDepositEventObject {
  wallet: string;
  amount: BigNumber;
  token: string;
}
export type WithdrawRejectedDepositEvent = TypedEvent<
  [string, BigNumber, string],
  WithdrawRejectedDepositEventObject
>;

export type WithdrawRejectedDepositEventFilter =
  TypedEventFilter<WithdrawRejectedDepositEvent>;

export interface Portal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PortalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainSequenceId(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositNativeAsset(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        trader: string;
        asset: string;
        participatingInterface: string;
        amount: BigNumber;
        chainSequenceId: BigNumber;
        chainId: BigNumber;
      }
    >;

    depositsPaused(overrides?: CallOverrides): Promise<[boolean]>;

    getAvailableBalance(
      _trader: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pauseDeposits(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rejectDeposits(
      _depositHashes: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rejected(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rejectedDeposits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestSettlement(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    resumeDeposits(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settled(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    settlementRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        trader: string;
        asset: string;
        participatingInterface: string;
        chainSequenceId: BigNumber;
        chainId: BigNumber;
      }
    >;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawRejected(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    writeObligations(
      obligations: IPortal.ObligationStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  chainSequenceId(overrides?: CallOverrides): Promise<BigNumber>;

  collateralized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositNativeAsset(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber] & {
      trader: string;
      asset: string;
      participatingInterface: string;
      amount: BigNumber;
      chainSequenceId: BigNumber;
      chainId: BigNumber;
    }
  >;

  depositsPaused(overrides?: CallOverrides): Promise<boolean>;

  getAvailableBalance(
    _trader: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pauseDeposits(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rejectDeposits(
    _depositHashes: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rejected(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rejectedDeposits(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestSettlement(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  resumeDeposits(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settled(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  settlementRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      trader: string;
      asset: string;
      participatingInterface: string;
      chainSequenceId: BigNumber;
      chainId: BigNumber;
    }
  >;

  withdraw(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawRejected(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  writeObligations(
    obligations: IPortal.ObligationStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    chainSequenceId(overrides?: CallOverrides): Promise<BigNumber>;

    collateralized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositNativeAsset(overrides?: CallOverrides): Promise<void>;

    depositToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        trader: string;
        asset: string;
        participatingInterface: string;
        amount: BigNumber;
        chainSequenceId: BigNumber;
        chainId: BigNumber;
      }
    >;

    depositsPaused(overrides?: CallOverrides): Promise<boolean>;

    getAvailableBalance(
      _trader: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseDeposits(overrides?: CallOverrides): Promise<void>;

    rejectDeposits(
      _depositHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    rejected(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectedDeposits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestSettlement(_token: string, overrides?: CallOverrides): Promise<void>;

    resumeDeposits(overrides?: CallOverrides): Promise<void>;

    settled(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        trader: string;
        asset: string;
        participatingInterface: string;
        chainSequenceId: BigNumber;
        chainId: BigNumber;
      }
    >;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRejected(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    writeObligations(
      obligations: IPortal.ObligationStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,address,uint256)"(
      wallet?: null,
      amount?: null,
      token?: null,
      chainSequenceId?: null
    ): DepositEventFilter;
    Deposit(
      wallet?: null,
      amount?: null,
      token?: null,
      chainSequenceId?: null
    ): DepositEventFilter;

    "DepositUtxo(address,uint256,address,address,uint256,bytes32)"(
      wallet?: null,
      amount?: null,
      token?: null,
      participatingInterface?: null,
      chainSequenceId?: null,
      utxo?: null
    ): DepositUtxoEventFilter;
    DepositUtxo(
      wallet?: null,
      amount?: null,
      token?: null,
      participatingInterface?: null,
      chainSequenceId?: null,
      utxo?: null
    ): DepositUtxoEventFilter;

    "DepositsPaused()"(): DepositsPausedEventFilter;
    DepositsPaused(): DepositsPausedEventFilter;

    "DepositsResumed()"(): DepositsResumedEventFilter;
    DepositsResumed(): DepositsResumedEventFilter;

    "RejectedDeposit(address,address,uint256)"(
      trader?: null,
      asset?: null,
      amount?: null
    ): RejectedDepositEventFilter;
    RejectedDeposit(
      trader?: null,
      asset?: null,
      amount?: null
    ): RejectedDepositEventFilter;

    "SettlementProcessed(address,address,uint256)"(
      trader?: null,
      token?: null,
      amount?: null
    ): SettlementProcessedEventFilter;
    SettlementProcessed(
      trader?: null,
      token?: null,
      amount?: null
    ): SettlementProcessedEventFilter;

    "SettlementRequested(address,address,uint256)"(
      trader?: null,
      token?: null,
      chainSequenceId?: null
    ): SettlementRequestedEventFilter;
    SettlementRequested(
      trader?: null,
      token?: null,
      chainSequenceId?: null
    ): SettlementRequestedEventFilter;

    "Withdraw(address,uint256,address)"(
      wallet?: null,
      amount?: null,
      token?: null
    ): WithdrawEventFilter;
    Withdraw(wallet?: null, amount?: null, token?: null): WithdrawEventFilter;

    "WithdrawRejectedDeposit(address,uint256,address)"(
      wallet?: null,
      amount?: null,
      token?: null
    ): WithdrawRejectedDepositEventFilter;
    WithdrawRejectedDeposit(
      wallet?: null,
      amount?: null,
      token?: null
    ): WithdrawRejectedDepositEventFilter;
  };

  estimateGas: {
    chainSequenceId(overrides?: CallOverrides): Promise<BigNumber>;

    collateralized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositNativeAsset(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    depositToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    depositsPaused(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableBalance(
      _trader: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseDeposits(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rejectDeposits(
      _depositHashes: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rejected(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectedDeposits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestSettlement(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    resumeDeposits(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settled(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawRejected(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    writeObligations(
      obligations: IPortal.ObligationStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chainSequenceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositNativeAsset(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableBalance(
      _trader: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseDeposits(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rejectDeposits(
      _depositHashes: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rejected(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectedDeposits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestSettlement(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    resumeDeposits(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settled(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settlementRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawRejected(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    writeObligations(
      obligations: IPortal.ObligationStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
